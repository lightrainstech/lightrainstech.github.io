<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lightrains Technolabs</title>
    <description>Engineering Blockchain and Smart contracts.</description>
    <link>https://lightrains.com/</link>
    <atom:link href="https://lightrains.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 03 Dec 2016 09:04:06 +0530</pubDate>
    <lastBuildDate>Sat, 03 Dec 2016 09:04:06 +0530</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Sneak Peak: Our vimrc</title>
        <description>This is series of articles explaining our development Environment. This time we will be discussing
about vimrc which is a configuration file that we can use to manage our Vim settings.

You can find the file
here.

Basic Vim Settings


  set number It enables line number in vim
  set relativenumber Enables relative numbers in vim. Means Vim will adjust line numbers based on
your current cursor position.
  set linebreak Break lines at word if you have enabled wraplines.
  set showbreak=+++ Identify breaked lines with +++
  set textwidth=100 Line wrap (number of cols)
  set showmatch Highlight matching brace
  set hlsearch  Highlight all search results
  set smartcase Enable smart-case search
  set ignorecase  Always case-insensitive
  set incsearch Searches for strings incrementally
  set autoindent  Auto-indent new lines
  set smartindent Enable smart-indent
  set smarttab  Enable smart-tabs
  set softtabstop=4 Number of spaces per Tab
  autocmd BufRead,BufNewFile *.md setlocal spell Enables spell check for markdown files, ending with extension md
  set complete+=kspell Enables spelling auto complete.


Advanced Settings
</description>
        <pubDate>Tue, 29 Nov 2016 05:10:00 +0530</pubDate>
        <link>https://lightrains.com/blogs/sneak-peak-into-our-vimrc</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/sneak-peak-into-our-vimrc</guid>
        
        <category>Development Tools</category>
        
        <category>Vim</category>
        
        <category>vimrc</category>
        
        <category>Sneak Peak</category>
        
        
      </item>
    
      <item>
        <title>Liquid Voting</title>
        <description>Liquid Voting is a blockchain based voting/decision making platform made at hack4people Hackathon by team  lightrains. (niksmac, kp666 &amp;amp; sibizulu)

Corruption exist because of concentrating of power. Our solution brings that power to the masses. This is brought by the power of decentralization on top of a tamper proof public blockchain. The voting platform is so powerful that it can pave the path to liquid democracy. The real impact is when we use the platform for day to day decision making in government activities.

This platform uses Ethereum Private network as the Blockchain platform, and Solidity Smart contracts to record the votes as well as elections. Votes are saved in a tamper proof manner and the candidate can change the vote if the need arises.

Inspiration

  “The ballot is stronger than the bullet.”
-Abraham Lincoln


Intentions


  Improve Transparency in Voting
  Reduce security risk
  Reduce cost of running an election
  Act as a platform to vote on decisions.


Outcome


  Built on top of Blockchain
  Elections are secured by Smart Contracts
  Cost of infrastructure will be very less (~0.5%)


Project


  Master
  Front End (UI)
  Back end
  Election Smart Contract
  Slides

</description>
        <pubDate>Fri, 11 Nov 2016 11:19:48 +0530</pubDate>
        <link>https://lightrains.com/work/liquid-voting-blockchain-election</link>
        <guid isPermaLink="true">https://lightrains.com/work/liquid-voting-blockchain-election</guid>
        
        
        <category>Blockchain</category>
        
        <category>Ethereum</category>
        
        <category>Smart Contract</category>
        
      </item>
    
      <item>
        <title>How to set up elm development environment</title>
        <description>Elm is a language that compiles to JavaScript, or in other words, Elm is a language to generate functional JavaScript code.


  This guide is talking about installing and setting up elm version 0.17.1


Why we need Elm?
Elm is a programming language for declaratively creating web browser-based graphical user interfaces. Elm is purely functional, and is developed with emphasis on usability, performance, and robustness. It advertises “no runtime exceptions in practice”, made possible by the Elm compiler’s static type checking.

Update 22, Oct 2016.

  I came across Elm For Beginners amazing set of tutorials by James Moore, i would recommend watching it. Also his note on Development Environment Setup Steps


Features of Elm


  JavaScript Interop
  No Runtime Exceptions
  Great Performance
  Enforced Semantic Versioning


Read details.

1. Installing Elm Platform.

You can download the latest package from here.

OR


  Mac Installer
  Windows Installer
  Anywhere npm or build from source


Configure Your Editor

Before you start you can play around with the online editor to get familiarized with the language.


  Atom
  Emacs
  Sublime Text
  Vim


Why should you consider using Elm?

Elm offers many benefits over JavaScript, which you’ll see in this course.
Benefits such as:

  Zero Runtime Exceptions
  Simplified Debugging
  Easy Refactoring
  Helpful Type System &amp;amp; Compiler
  Improved Productivity
  Inherently testable code
  Enforced Semantic Versioning


Source


  guide.elm-lang.org
  elmcast.io
  elm-lang.org

</description>
        <pubDate>Fri, 14 Oct 2016 05:10:00 +0530</pubDate>
        <link>https://lightrains.com/blogs/setup-elm-development-environment</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/setup-elm-development-environment</guid>
        
        <category>Elm</category>
        
        <category>Elm-lang</category>
        
        <category>Development Tools</category>
        
        <category>Functional JavaScript</category>
        
        <category>Functional Programming</category>
        
        
      </item>
    
      <item>
        <title>What does each genesis.json parameter mean?</title>
        <description>The Genesis block is the start block of the Blockchain - the first block, block 0, the only block that does not point to a predecessor block. Parameters of genesis.json nonce timestamp mixhash difficulty alloc parentHash extraData gasLimit coinbase Parameters and Explanation nonce A 64-bit hash, which proves, combined with the mix-hash, that a sufficient amount of computation has been carried out on this block: the Proof-of-Work (PoW). The combination of nonce and mixhash must satisfy a mathematical condition described in the Yellowpaper, 4.3.4. Block Header Validity, (44), and allows to verify that the Block has really been cryptographically mined and thus, from this aspect, is valid. The nonce is the cryptographically secure mining proof-of-work that proves beyond reasonable doubt that a particular amount of computation has been expended in the determination of this token value. (Yellowpager, 11.5. Mining Proof-of-Work). timestamp A scalar value equal to the reasonable output of Unix time() function at this block inception. This mechanism enforces a homeostasis in terms of the time between blocks. A smaller period between the last two blocks results in an increase in the difficulty level and thus additional computation required to find the next valid block. If the period is too large, the difficulty, and expected time to the next block, is reduced. The timestamp also allows verifying the order of block within the chain (Yellowpaper, 4.3.4. (43)). mixhash A 256-bit hash which proves, combined with the nonce, that a sufficient amount of computation has been carried out on this block: the Proof-of-Work (PoW). The combination of nonce and mixhash must satisfy a mathematical condition described in the Yellowpaper, 4.3.4. Block Header Validity, (44). It allows to verify that the Block has really been cryptographically mined, thus, from this aspect, is valid. difficulty A scalar value corresponding to the difficulty...</description>
        <pubDate>Thu, 13 Oct 2016 05:10:00 +0530</pubDate>
        <link>https://lightrains.com/blogs/genesis-json-parameter-explained-ethereum</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/genesis-json-parameter-explained-ethereum</guid>
        
        <category>Ethereum</category>
        
        <category>Mining</category>
        
        <category>Difficulty</category>
        
        <category>DAG</category>
        
        <category>Principles</category>
        
        <category>Blockchain</category>
        
        <category>Genesis Block</category>
        
        
      </item>
    
      <item>
        <title>Noteworthy projects based on Blockchain Technology</title>
        <description>Decentralized network existed before blockchain. But the key innovation of blockchain is its ability to hold the economic value, as pioneered as Bitcoin network. Currently, the blockchain is used in broad range of decentralized applications in many areas, including commerce, social media, content sharing, internet services, logistics and even government. Here are some Blockchain and Ethereum based projects. Git Money (Bitcoin) Git Money allows anyone to earn money by solving open issues on GitHub. Repository owners put up bounties for tasks and the reward is automatically paid to whoever submits the first successfully merged pull request. How it works Git opportunities: Every day people and companies are paying to get quick assistance with small tasks, find one suitable for you. Git work: An email a day will give you the list of work so that you can choose your work to get paid Get paid: Complete a task, provide your bitcoin address and get paid instantly. Augur (Ethereum) Augur is a prediction market platform that rewards for correctly predicting the future real-world events. Make the predictions by trading virtual shares in the outcome of events happening in the real world, buy shares in those outcomes. If the shares are in correct outcome you’ll win real money as profit. Features No central servers Create your own market Low fees Crowdsourced reporting Safe, automated payments TransActive Grid (Ethereum) TransActive Grid allows neighbors to purchase and sell renewable energy among each other, offering communities with microgrids a way to create a local energy market while reducing emissions and pollution. How it works Distributed Energy Resources: Brooklyn Microgrid is a distributed energy development group in the Park Slope and Gowanus communities of Brooklyn, New York creating a connected network for local energy. TransActive Grid: TransActive Grid is combination of ​software ​and hardware ​that enables...</description>
        <pubDate>Wed, 28 Sep 2016 05:10:00 +0530</pubDate>
        <link>https://lightrains.com/blogs/noteworthy-blockchain-projects</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/noteworthy-blockchain-projects</guid>
        
        <category>Blockchain</category>
        
        <category>Blockchain Projects</category>
        
        
      </item>
    
      <item>
        <title>Open source Blockchain platforms</title>
        <description>Open source software is revolutionizing technology by enabling companies to speed development, reduce costs, increase innovation, and improve efficiency. Never before has any open source project generated as much attention on the international stage as Bitcoin. But now a days the world is looking into open source Blockchain platforms. Here are some open source Blockchain platforms. 1. Eris erisindustries.com A software that allows anyone to create their own secure, low-cost and run anywhere application using Blockchain and smart contract technology. Communities, government and anybody else can use smart contracts to automate their business with Eris. Eris is free software that allows anyone to build their own secure, low-cost, run-anywhere applications using blockchain and smart contract technology. Features Services: Things that you turn on and off Chains: Develop permissioned chains Contracts: There is a smart contract tool chain in Eris Actions: Every action is step by step. 2. HydraChain hydrachain.com HydraChain is an extension of the Ethereum platform which adds support for creating Permissioned Distributed Ledgers. Its primary domain of application are private chain or consortium chain setups especially in the financial industry. Features Full compatibility to the Ethereum Protocol Accountable Validators Instant finality Native Contracts Customizability Easy Deployment Open source Commercial support 3. MultiChain multichain.com Allows organizations to rapidly design, deploy and operate Distributed ledgers Features Managed Permission Rapid deployment Native asset support Customizable Bitcoin compatible Extendable 4. OpenChain openchain.org Openchain is an open source distributed ledger technology. It is suited for organizations wishing to issue and manage digital assets in a robust, secure and scalable way. Anyone can spin up a new Openchain instance within seconds. The administrator of an Openchain instance defines the rules of the ledger. End-users can exchange value on the ledger according to those rules. Every transaction on the ledger is digitally signed, like with...</description>
        <pubDate>Thu, 22 Sep 2016 05:10:00 +0530</pubDate>
        <link>https://lightrains.com/blogs/opensource-blockchain-platforms</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/opensource-blockchain-platforms</guid>
        
        <category>Blockchain</category>
        
        <category>Platforms</category>
        
        <category>Development Tools</category>
        
        <category>Open Source</category>
        
        
      </item>
    
      <item>
        <title>Functional Programming in JavaScript</title>
        <description>In computer science, functional programming is a programming paradigm—a style of building the structure and elements of computer programs—that treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data. It is a declarative programming paradigm, which means programming is done with expressions or declarations instead of statements. wiki If you’re looking for a quick start in Functional Programming, JavaScript is the perfect language for you. Here’s why: Almost all programmers have tweaked and / or written JavaScript code at some point of time — hence there should be a certain familiarity JavaScript comes as close to a standardized programming language we’ll get — it’s the only programming language available across all web browsers JavaScript comes with a very familiar C like syntax and should be readable to most programmers Functions have always been first class members in JavaScript, support for Functional Programming is very good and in many ways JavaScript has been ahead of its time JavaScript doesn’t have Java like Class based Object Oriented Programming support so in many ways you’re forced to be Functional in JavaScript Main fancy words you will hear Pure functions Higher-order functions Recursion Functor Compose Destructuring Currying Pure functions Returns the same result given same parameters. It’s execution doesn’t depend on the state of the system. 1) Impure let number = 1; const increment = () =&amp;gt; number += 1; increment(); // 2 2) Pure const increment = n =&amp;gt; n + 1; increment(1); // 2 Higher-order functions Functions that operate on other functions, either by taking them as arguments or by returning them. 1) Sum const sum = (x, y) =&amp;gt; x + y; const calculate = (fn, x, y) =&amp;gt; fn(x, y); calculate(sum, 1, 2); // 3 2) Filter let students = [ {name: 'Anna', grade: 6}, {name:...</description>
        <pubDate>Wed, 21 Sep 2016 05:10:00 +0530</pubDate>
        <link>https://lightrains.com/blogs/functional-javascript-es6-introduction</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/functional-javascript-es6-introduction</guid>
        
        <category>Functional JavaScript</category>
        
        <category>ES6</category>
        
        <category>JavaScript</category>
        
        <category>Functional Programming</category>
        
        
      </item>
    
      <item>
        <title>Introduction to Tmux</title>
        <description>tmux is a “terminal multiplexer”, it enables a number of terminals (or windows) to be accessed and controlled from a single terminal. tmux is intended to be a simple, modern, BSD-licensed alternative to programs such as GNU screen. Install tmux. tmux depends on libevent 2.x. Download it from: libevent.org From source By default, tmux will use the utempter library to update utmp(5), if it is installed. Run configure with --disable-utempter to disable this. To build tmux from a release tarball, do: $ ./configure &amp;amp;&amp;amp; make $ sudo make install To get and build the latest from version control: $ git clone https://github.com/tmux/tmux.git $ cd tmux $ sh autogen.sh $ ./configure &amp;amp;&amp;amp; make Install tmux in Mac OSX Yes, you can do brew install tmux Starting Tmux You can start a tmux session by tmux attach or simply tmux a command. Managing the configuration. You can manage all the configurations with .tmux.conf file. Which will reside in your home folder. You can check with cat ~/.tmux.conf to see whether there is any. Multiple Pane Synchronization What setw synchronise-panes gives us is that it simultaneously sends keyboard input from one pane to the rest of the panes. (In this case, we can also see the the Elixir REPL is far superior because of the colored output.) Obviously, this demonstration is a mere party trick to impress developers and nothing more. A good use case is having to perform a repetitive operation on multiple machines. For example, imagine having a tmux session connected to four remote hosts and having to executer the exact same command on all of them. Noteworthy plugins. 1. Tmux Plugin Manager Installs and loads TMUX plugins. 2. tmux-resurrect Restore tmux environment after system restart. Tmux is great, except when you have to restart the computer. You lose all the...</description>
        <pubDate>Sat, 03 Sep 2016 05:10:00 +0530</pubDate>
        <link>https://lightrains.com/blogs/tmux-tips</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/tmux-tips</guid>
        
        <category>Development Tools</category>
        
        <category>Tmux</category>
        
        <category>Tools</category>
        
        
      </item>
    
      <item>
        <title>What is Private Permissioned Blockchain</title>
        <description>Properly permissioned blockchain networks differ from unpermissioned blockchain networks solely based on the presence (or absence) of an access control layer built into the blockchain clients.

The first primary difference between a properly conceived permissioned blockchain network and an unpermissioned blockchain network is whether the participants in the network have an ability to restrict who can participate in the consensus mechanism of the blockchain’s network.

Permissioned blockchain networks allow the network to appoint a group of participants in the network who are given the express authority to provide the validation of blocks of transactions. Or, to participate in the consensus mechanism.

Why do we need Permissioned Blockchain

To understand the benefits of permissioned blockchain networks to their participants, we must consider the relative advantages which they have vis a vis their unpermissioned cousins.

We must also consider the relative advantages which permissioned blockchain networks have vis a vis their cousins on the other side of the spectrum: hub and spoke distributed databases.


  Governance Over A Permissioned Blockchain is Clearly Defined
  More Cost Effective
  Extra layer of security is there. (could be)


Sources

  https://docs.erisindustries.com



  
    
    Talk to one of our consultant.
  

  
 hexlxlo@xligxhtrxaxixnxs.com



</description>
        <pubDate>Fri, 12 Aug 2016 05:10:00 +0530</pubDate>
        <link>https://lightrains.com/blogs/what-private-permissioned-blockchain</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/what-private-permissioned-blockchain</guid>
        
        <category>Blockchain</category>
        
        <category>Private Blockchain</category>
        
        <category>Permissioned Blockchain</category>
        
        
      </item>
    
      <item>
        <title>Blockchain for Insurance Industry</title>
        <description>Insurance companies have been traditionally slow to drive adoption in technologies. These innovation strategies and initiatives are aimed at retaining customers and optimizing pricing and tradability of services. Insurers who have trust at the heart have begun to appreciate with technologies such as blockchain because they believe that a “trustless” system (which pushes identity management, ownership and management of data and processes to the customer) may provide genuine long-term strategic benefits. Whats is meant by trust-less: The greatest advantage of blockchains is its decentralized protocol which is often referred as “Trust to the trust-less world”. Because every part of the system is continually checking and approving the work of the others. Therefore, if any piece of information will be changed on one machine, it won’t be approved by the others as all of them hold the same record. In the banking industry, several blockchain use conditions are being integrated, which range from customer-facing repayment technology to switch and trading services.While the insurance industry (in conditions of technology adoption) lags behind banking, it is nevertheless uniquely positioned to reap the benefits of blockchain technology. Blockchain can address the competitive challenges many incumbents face, including poor customer engagement, limited growth in mature markets, and the trends of digitization. In the next, we format the most appealing insurance-related use circumstances in three categories: enabling progress, increasing efficiency, and lowering cost by automating key techniques. Potential use cases Validate authenticity, ownership, and provenance of goods as well as authenticity of documents (e.g., medical reports) Check for police theft reports/claims history as well as a person’s verified identity and detect patterns of fraudulent behavior related to a specific identity Prove date and time of policy issuance or purchase of a product/asset Confirm subsequent ownership and location changes. How CAN we keep the files on the...</description>
        <pubDate>Fri, 12 Aug 2016 05:10:00 +0530</pubDate>
        <link>https://lightrains.com/blogs/blockchain-for-insurance-industry</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/blockchain-for-insurance-industry</guid>
        
        <category>Blockchain</category>
        
        <category>Whitepaper</category>
        
        
      </item>
    
      <item>
        <title>What Is Bitcoin and how is it useful</title>
        <description>Bitcoin is a decentralized digital currency, created and held electronically. No one controls it. They’re not printed, produced by people, and increasingly businesses, running computers all around the world, using software that solves mathematical problems.

Satoshi Nakamoto, a software developer proposed bitcoin, which was an electronic payment system based on mathematical proof. Idea was to produce a currency independent of any central authority, transferable electronically, more or less instantly, with very low transaction fees.

Characteristics of Bitcoin


  Decentralized
  Easy to set up
  Anonymous
  Transparent
  Minimal Transaction fee
  Fast transaction
  Non-repudiable


How does one acquire bitcoins?


  As payment for goods or services.
  Purchase bitcoins at a Bitcoin exchange.
  Exchange bitcoins from anyone.
  Earn bitcoins through mining.


Advantage/Disadvantage of Bitcoin

Advantages:


  Payment Freedom:- It is possible to send and receive bitcoins anywhere in the world at any time
  Less transaction Fees:- No fee to receive bitcoins. You can choose your transaction fee and many wallets let you control how large a fee to pay when spending.
  Risk Free:- Bitcoin transactions are secure, irreversible, and do not contain customers’ sensitive or personal information.
  Highly secured:- Bitcoin payments can be made without personal information tied to the transaction thus offers strong protection against identity theft.
  Neutral and Transparent:- All information about the Bitcoin money supply is available on the block chain and anybody can verify and use in real-time.


Disadvantages:


  Degree Of Acceptance:- Many people are still unaware of Bitcoin.
  Volatility:- The price of the Bitcoin is volatile, it varies as per time.
  Ongoing Development:- Bitcoin is still in the process of maturing.

</description>
        <pubDate>Tue, 09 Aug 2016 05:10:00 +0530</pubDate>
        <link>https://lightrains.com/blogs/bitcoin-how-is-useful</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/bitcoin-how-is-useful</guid>
        
        <category>Bitcoin</category>
        
        <category>Cryptocurrency</category>
        
        
      </item>
    
      <item>
        <title>ES6 Transpilers</title>
        <description>What is a Transpiler
A source-to-source compiler, transcompiler or transpiler is a type of compiler that takes the
source code of a program written in one programming language as its input and produces the
equivalent source code in another programming language. A source-to-source compiler translates
between programming languages that operate at approximately the same level of abstraction, while
a traditional compiler translates from a higher level programming language to a lower level
programming language. wiki

List of ES6 Transpilers

  Babel: To transpile ES6 into ES5 for static builds
  Babelify: To incorporate babel into your Gulp, Grunt, or npm run build process
  Traceur compiler: ES6 features &amp;gt; ES5. Includes
classes, generators, promises, destructuring patterns, default parameters &amp;amp; more.
  es6ify: Traceur compiler wrapped as a Browserify v2 transform


ES6 to ES5 Transpilation Example
For this example we are using Babel’s live transpiler to see the code
in action.

ES6 Code

import config from './config/env';
import app from './config/express';

// listen on port config.port
app.listen(config.port, () =&amp;gt; {
  debug(`server started on port ${config.port} (${config.env})`);
});

export default app;



ES5 Converted

'use strict';

Object.defineProperty(exports, &quot;__esModule&quot;, {
  value: true
});

var _env = require('./config/env');

var _env2 = _interopRequireDefault(_env);

var _express = require('./config/express');

var _express2 = _interopRequireDefault(_express);

function _interopRequireDefault(obj) { return obj &amp;amp;&amp;amp; obj.__esModule ? obj : { default: obj }; }

// listen on port config.port
_express2.default.listen(_env2.default.port, function () {
  debug('server started on port ' + _env2.default.port + ' (' + _env2.default.env + ')');
});

exports.default = _express2.default;



Sources


  https://scotch.io
  https://github.com/bevacqua/es6#introduction
  https://github.com/addyosmani/es6-tools

</description>
        <pubDate>Sun, 07 Aug 2016 05:10:00 +0530</pubDate>
        <link>https://lightrains.com/blogs/es6-transpilers</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/es6-transpilers</guid>
        
        <category>ES6</category>
        
        <category>Transpiler</category>
        
        <category>Ecmascript 6</category>
        
        
      </item>
    
      <item>
        <title>Getting started with Solidity.</title>
        <description>Solidity is a high-level language whose syntax is similar to that of JavaScript and it is designed to compile to code for the Ethereum Virtual Machine. As you will see, it is possible to create contracts for voting, crowdfunding, blind auctions, multi-signature wallets and more.

Solidity is the programming language that we use to create Etherem based Smart Contracts.

I have covered the steps to install Solidity in my previous blog Compile and Deploy Solidity
Contract

Data Types

Booleans

  bool: The possible values are constants true and false.


Operators:


  ! (logical negation)
  &amp;amp;&amp;amp; (logical conjunction, “and”)
  
    
      
        
           
          (logical disjunction, “or”)
        
      
    
  
  == (equality)
  != (inequality)


Integers

int / uint: Signed and unsigned integers of various sizes. Keywords uint8 to uint256 in steps of 8 (unsigned of 8 up to 256 bits) and int8 to int256. uint and int are aliases for uint256 and int256, respectively.

Address
address: Holds a 20 byte value (size of an Ethereum address). Address types also have members and serve as base for all contracts.

Next we will look into Expressions and Control Structures

Source


  Official Docs
  Types



  
    
    Talk to one of our consultant.
  

  
 hexlxlo@xligxhtrxaxixnxs.com



</description>
        <pubDate>Mon, 01 Aug 2016 09:10:00 +0530</pubDate>
        <link>https://lightrains.com/blogs/ethereum-solidity-getting-started</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/ethereum-solidity-getting-started</guid>
        
        <category>Ethereum</category>
        
        <category>Solidity</category>
        
        <category>EVM</category>
        
        
      </item>
    
      <item>
        <title>ECMAScript 6 Classes.</title>
        <description>ECMAScript 6 (ES6, often referred to as Harmony) is the upcoming sixth major release of the ECMAScript language specification.The technology bringing a lot of amazing features that we will need to know. One of the main feature that introducing by the  ES6 is “Javascript Classes”.

Classes
Classes are the main  new OOP paradigm in ES6 which make code syntatic sugar.That means classes make prototype-based OO pattern much simpler and boosts interoperability.Classes supports inheritance,instance and static methods which makes ES6 more user friendly.

Class body and methods
The body of a class is enclosed in curly braces {}.Here we can define methods or constructors.

Constructor:
A special method for creating and initializing an object created with a class.

Example:

class Number{
    constructor(num1, num2) {
        this.num1 = num1;
        this.num2 = num2;
    }
    calcSum() {
        return this.num1 + this.num2;
    }
    getSum(){
        return this.calcSum();
    }
}
numOperation = new Number(20, 10);
console.log(numOperation.getSum);



Subclassing using extend keyword:
The extends keyword is used in class declarations or class expressions to create a class as a child of another class.

Example:

class Animal {
    constructor(name) {
        this.name = name;
    }
    speak() {
        console.log(this.name + ' makes a noise.');
    }
}
class Dog extends Animal {
    speak() {
        console.log(this.name + ' barks.');
    }
}


</description>
        <pubDate>Mon, 01 Aug 2016 02:10:00 +0530</pubDate>
        <link>https://lightrains.com/blogs/es6-classes</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/es6-classes</guid>
        
        <category>ES6</category>
        
        <category>Ecmascript 6</category>
        
        <category>ES6 Tutorials</category>
        
        
      </item>
    
      <item>
        <title>Bitcoins most Intriguing Qualities</title>
        <description>Bitcoin is an innovative payment network and a new kind of money. Find all you need to know and get started with Bitcoin on bitcoin.org.Some of Bitcoin’s Most Intriguing Qualities Bitcoin Cryptocurrency A cryptocurrency (or crypto currency) is a medium of exchange using cryptography to secure the transactions and to control the creation of additional units of the currency.[1] Cryptocurrencies are a subset of alternative currencies, or specifically of digital currencies. wiki Bitcoin and bitcoin Aren’t the Same Bitcoin with a capital ‘B’ is used when referring to the network, while the currency is spelt with a small ‘b’. There Will Only Ever Be 21 Million bitcoins we can accurately predict, almost to the exact hour, the date the 21 millionth, and last, bitcoin will enter circulation. Bitcoin is Operated by Users, Not Institutions Bitcoin is run through a peer-to-peer network, meaning that there is no central control, but rather the control is decentralised throughout the user base. bitcoins Aren’t Minted; They’re Mined Unlike traditional currency, bitcoins exist as a result of a production process called mining. People use computers to solve complex mathematical algorithms in order to introduce new bitcoins into the economy. bitcoins Are Stored in Digital Wallets, Not Banks User store their bitcoins safely online Bitcoin Transactions are Pseudonymous The true names of buyers and sellers are never revealed. Though each transaction is recorded in a public ledger (blockchain) only their wallet ID’s will be represented, bitcoin is Divisible to 1 Million Bits One bitcoin can be broken down to 1,000,000 bits. 0,00000001 of a bitcoin is known as a satoshi, Bitcoin Network is Virtually ‘Unhackable’ Bitcoin is secured by military-grade cryptography. The only considerable source ever imposing a threat would be quantum computing, which does not yet exist. Bitcoin Computes More Than 100,000 Transactions a Day...</description>
        <pubDate>Fri, 29 Jul 2016 12:23:22 +0530</pubDate>
        <link>https://lightrains.com/blogs/intriguing-qualities-of-bitcoin</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/intriguing-qualities-of-bitcoin</guid>
        
        <category>Bitcoin</category>
        
        <category>Blockchain</category>
        
        <category>Cryptocurrency</category>
        
        
      </item>
    
      <item>
        <title>ES6 Data Structures</title>
        <description>ES6 introduces many new features to embrace the developer as well as the browsers to perform
in a optimal performant way.

Set
Set is new type of data structure that we can use to store Unique values which can be of
any type but they must all be uniqie.

Create a Set

To create a set we use Set constructor var mySet = new Set();

Add Values to set

let myArray = [1, 4, 1, 5, 5, 7, 8, 9, 0, 0]
let mySet = new Set(myArray)



Now if you do a console.log(mySet); you will see
Set {1, 4, 5, 7, 8, 9, 0}

Map

Map is similar to Set but it manges key-value pair instead of individual values.

Create a Map

var myMap = new Map(); will create an instance of Map and to add values to it we can do let
myOtherMap = new Map([['a', 2], [1, 'b']])

console.log(myOtherMap); will show Map {&quot;a&quot; =&amp;gt; 2, 1 =&amp;gt; &quot;b&quot;}

WeakSet and WeakMap
Similar to regular Map and Set but the difference is that the object references inside them are
held weakly. So it wont prevent garbage collection.
</description>
        <pubDate>Tue, 26 Jul 2016 09:10:12 +0530</pubDate>
        <link>https://lightrains.com/blogs/es6-data-structres</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/es6-data-structres</guid>
        
        <category>ES6</category>
        
        <category>ES6 Tutorials</category>
        
        <category>Ecmascript 6</category>
        
        
      </item>
    
      <item>
        <title>Function parameters in es6</title>
        <description>There are 2 types of function parameters available in es6,


  Default Parameters
  Rest Parameters


Default Parameter
Default parameter are a way to pass a value to the function parameter when there is no value is being passed by the callee during invocation.

We specify this value when defining a function,

function printName ( name = 'there' ) {
  return `Hello,  ${name}`
}


We can even use the default parameter of one parameter as part of an expression for another
paramter. For eg:

function printName ( name = 'there', fullname = name + ' lastName' ) {
  return `Hello,  ${name} -  ${fullname} `
}



Rest Parameters
The rest parameter syntax allows us to represent an indefinite number of arguments as an array.

This is achieved by using a new operator called Spread Operator which is represented by ... 3dots

Spread Operator
It is used when we want to pass an array to a function as individual arguments of that function. For
eg:

function sum (x, y, z ) {
  return x + y + z;
}
let values = [1, 2, 3]
// notice the usage of ...
sum(...values)



Another Example
function f(x, ...y) {
 // y is an Array
 return x * y.length;
}
f(3, &quot;hello&quot;, true) == 6



If the last named argument of a function is prefixed with ..., it becomes an array whose elements from 0 (inclusive) to theArgs.length (exclusive) are supplied by the actual arguments passed to the function.

In the above example, theArgs would collect the third argument of the function (because the first one is mapped to a, and the second to b) and all the consecutive argument

Sources:


  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters
  https://lightrains.com/blogs/es6#default–rest–spread

</description>
        <pubDate>Wed, 20 Jul 2016 09:12:00 +0530</pubDate>
        <link>https://lightrains.com/blogs/function-parameteres-ecmascript6-es6</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/function-parameteres-ecmascript6-es6</guid>
        
        <category>ES6</category>
        
        <category>ES6 Tutorials</category>
        
        <category>Ecmascript 6</category>
        
        
      </item>
    
      <item>
        <title>Common useful JavaScript snippets for geth</title>
        <description>This is a collection of common useful scripts that are handy when you do any kind of developemt on the Ethereum Virtual Machine aka EVM. This collection of scripts are availabe in github niksmac/ethereum-scripts 1. Print Block Details This function is uswful when you want to print the details of a block in the console function printBlock(block) { console.log(&quot;Block number : &quot; + block.number + &quot;\n&quot; + &quot; hash : &quot; + block.hash + &quot;\n&quot; + &quot; parentHash : &quot; + block.parentHash + &quot;\n&quot; + &quot; nonce : &quot; + block.nonce + &quot;\n&quot; + &quot; sha3Uncles : &quot; + block.sha3Uncles + &quot;\n&quot; + &quot; logsBloom : &quot; + block.logsBloom + &quot;\n&quot; + &quot; transactionsRoot: &quot; + block.transactionsRoot + &quot;\n&quot; + &quot; stateRoot : &quot; + block.stateRoot + &quot;\n&quot; + &quot; miner : &quot; + block.miner + &quot;\n&quot; + &quot; difficulty : &quot; + block.difficulty + &quot;\n&quot; + &quot; totalDifficulty : &quot; + block.totalDifficulty + &quot;\n&quot; + &quot; extraData : &quot; + block.extraData + &quot;\n&quot; + &quot; size : &quot; + block.size + &quot;\n&quot; + &quot; gasLimit : &quot; + block.gasLimit + &quot;\n&quot; + &quot; gasUsed : &quot; + block.gasUsed + &quot;\n&quot; + &quot; timestamp : &quot; + block.timestamp + &quot;\n&quot; + &quot; transactions : &quot; + block.transactions + &quot;\n&quot; + &quot; uncles : &quot; + block.uncles); if (block.transactions != null) { console.log(&quot;--- transactions ---&quot;); block.transactions.forEach( function(e) { printTransaction(e); }) } } 2. Check all Balances Can be used to cheak balances of all accounts inside your keystore; ie, you own both the keys. function checkAllBalances() { var i =0; eth.accounts.forEach( function(e){ console.log(&quot; eth.accounts[&quot;+i+&quot;]: &quot; + e + &quot; \tbalance: &quot; + web3.fromWei(eth.getBalance(e), &quot;ether&quot;) + &quot; ether&quot;); i++; }) }; 3. Get Account Balances And Including TheDAO Tokens function padTokens(s, n) { var o = s.toPrecision(n); while (o.length &amp;lt; n) {...</description>
        <pubDate>Fri, 15 Jul 2016 11:19:48 +0530</pubDate>
        <link>https://lightrains.com/blogs/useful-ethereum-geth-javascript-snippets</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/useful-ethereum-geth-javascript-snippets</guid>
        
        <category>Blockchain</category>
        
        <category>Ethereum</category>
        
        <category>geth</category>
        
        <category>go-ethereum</category>
        
        
      </item>
    
      <item>
        <title>Introduction to IPFS</title>
        <description>IPFS is a peer-to-peer distributed file system that seeks to connect all computing devices with the same system of files. In some ways, IPFS is similar to the World Wide Web, but IPFS could be seen as a single BitTorrent swarm, exchanging objects within one Git repository. In other words, IPFS provides a high-throughput, content-addressed block storage model, with content-addressed hyperlinks. What is IPFS? From their README: IPFS is a distributed file system that seeks to connect all computing devices with the same system of files. In some ways, this is similar to the original aims of the Web, but IPFS is actually more similar to a single bittorrent swarm exchanging git objects. IPFS could become a new major subsystem of the internet. If built right, it could complement or replace HTTP. It could complement or replace even more. It sounds crazy. It is crazy. HTTP is inefficient and expensive HTTP downloads a file from a single computer at a time, instead of getting pieces from multiple computers simultaneously. With video delivery, a P2P approach could save 60% in bandwidth costs. The web’s centralization limits opportunity The Internet has been one of the great equalizers in human history and a real accelerator of innovation. But the increasing consolidation of control is a threat to that. Our apps are addicted to the backbone Developing world. Offline. Natural disasters. Intermittent connections. All trivial compared to interplanetary networking. The networks we’re using are so 20th Century. We can do better. How IPFS works Each file and all of the blocks within it are given a unique fingerprint called a cryptographic hash. IPFS removes duplications across the network and tracks version history for every file. Each network node stores only content it is interested in, and some indexing information that helps figure out who...</description>
        <pubDate>Tue, 05 Jul 2016 00:12:49 +0530</pubDate>
        <link>https://lightrains.com/blogs/ipfs-introduction</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/ipfs-introduction</guid>
        
        <category>IPFS</category>
        
        <category>Decentralization</category>
        
        
      </item>
    
      <item>
        <title>What is DAG in Ethereum Blockchain</title>
        <description>Dagger Hashimoto is a proposed spec for the mining algorithm for Ethereum 1.0. Dagger Hashimoto aims to simultaneously satisfy two goals:


  ASIC-resistance: the benefit from creating specialized hardware for the algorithm should be as small as possible, ideally to the point that even in an economy where ASICs have been developed the speedup is sufficiently small that it is still marginally profitable for users on ordinary computers to mine with spare CPU power.
  Light client verifiability: a block should be relatively efficiently verifiable by a light client.


Why do we need DAG in Ethereum?
Ethereum uses Ethash (Proof of Work system). as of now 
Ethash PoW is memory hard, making it basically ASIC resistant. This basically means that calculating the PoW requires choosing subsets of a fixed resource dependent on the nonce and block header. This resource (a few gigabyte size data) is called a DAG. Clients wishing to store the DAG in a cache should conform to this spec in order to share the cache with other clients:

Where is DAG stored
The DAG should be stored in a 1GB dump (for the initial epoch, anyway), in a file:

Mac/Linux: $(HOME)/.ethash/full-R&amp;lt;REVISION&amp;gt;-&amp;lt;SEEDHASH&amp;gt;
Windows: $(HOME)/Appdata/Local/Ethash/full-R&amp;lt;REVISION&amp;gt;-&amp;lt;SEEDHASH&amp;gt;

Format

Each file should begin with an 8-byte magic number, 0xfee1deadbaddcafe, written in little-endian format (i.e., bytes fe ca dd ba ad de e1 fe).

The Ethash algorithm expects the DAG as a two-dimensional array of uint32s (4-byte unsigned ints), with dimension (n × 16) where n is a large number. (n starts at 16777186 and grows from there.) Following the magic number, the rows of the DAG should be written sequentially into the file, with no delimiter between rows and each unint32 encoded in little-endian format.

Sources

  Dagger-Hashimoto
  Ethash DAG
  Directed acyclic graph - In mathematics and computer science

</description>
        <pubDate>Sun, 03 Jul 2016 00:07:20 +0530</pubDate>
        <link>https://lightrains.com/blogs/dag-ethereum-blockchain</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/dag-ethereum-blockchain</guid>
        
        <category>Blockchain</category>
        
        <category>DAG</category>
        
        <category>Principles</category>
        
        
      </item>
    
      <item>
        <title>ECMAScript 6</title>
        <description>ECMAScript 6, also known as ECMAScript 2015, is the latest version of the ECMAScript standard. ES6 is a significant update to the language, and the first update to the language since ES5 was standardized in 2009. Implementation of these features in major JavaScript engines is underway now. Content is copied shamelessly from lukehoban/es6features ES6 includes the following new features: arrows classes enhanced object literals template strings destructuring default + rest + spread let + const iterators + for..of generators unicode modules module loaders map + set + weakmap + weakset proxies symbols subclassable built-ins promises math + number + string + array + object APIs binary and octal literals reflect api tail calls ECMAScript 6 Features Arrows Arrows are a function shorthand using the =&amp;gt; syntax. They are syntactically similar to the related feature in C#, Java 8 and CoffeeScript. They support both statement block bodies as well as expression bodies which return the value of the expression. Unlike functions, arrows share the same lexical this as their surrounding code. // Expression bodies var odds = evens.map(v =&amp;gt; v + 1); var nums = evens.map((v, i) =&amp;gt; v + i); var pairs = evens.map(v =&amp;gt; ({even: v, odd: v + 1})); // Statement bodies nums.forEach(v =&amp;gt; { if (v % 5 === 0) fives.push(v); }); // Lexical this var bob = { _name: &quot;Bob&quot;, _friends: [], printFriends() { this._friends.forEach(f =&amp;gt; console.log(this._name + &quot; knows &quot; + f)); } } More info: MDN Arrow Functions Classes ES6 classes are a simple sugar over the prototype-based OO pattern. Having a single convenient declarative form makes class patterns easier to use, and encourages interoperability. Classes support prototype-based inheritance, super calls, instance and static methods and constructors. class SkinnedMesh extends THREE.Mesh { constructor(geometry, materials) { super(geometry, materials); this.idMatrix = SkinnedMesh.defaultMatrix(); this.bones = []; this.boneMatrices...</description>
        <pubDate>Thu, 30 Jun 2016 01:19:48 +0530</pubDate>
        <link>https://lightrains.com/blogs/es6</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/es6</guid>
        
        <category>ES6</category>
        
        <category>ECMAScript 2015</category>
        
        <category>Escamscript 6</category>
        
        <category>ES6 Tutorials</category>
        
        
      </item>
    
      <item>
        <title>Evolving the Identity</title>
        <description>Big news! Today, after five years, we’re releasing an updated brand identity, which includes a new logo, colors, and font. You’ll see the new look anywhere we’re out in public, like our website, Facebook, and Twitter; very soon you’ll see it in all of our products, as well.

We started by distilling the essence of our brand down to its colors on a clean white background—and built it back up.

Our design goal was to better match how we look to our values and the users we serve. A small team inside the company worked to find something that appeared crisp, approachable, smart, friendly, and connected.

Though it was time for change,
We’re still the same team: focused on Consulting &amp;amp; Development on Blockchain, Drupal and ES6.

As we begin this new chapter in Vision’s history, we are appreciative of each one of our customers, who collaborate with us daily to create next generation technology. We look forward to continued partnership and great things to come.

Sincerely,

Nikhil Mohan
COO
</description>
        <pubDate>Thu, 23 Jun 2016 01:19:48 +0530</pubDate>
        <link>https://lightrains.com/blogs/new-brand-identity-lightrains-tech</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/new-brand-identity-lightrains-tech</guid>
        
        <category>Brand</category>
        
        <category>Typography</category>
        
        
      </item>
    
      <item>
        <title>What is a DAO aka Decentralized Autonomous Organization</title>
        <description>A Decentralized autonomous organizations (“DAO”) is a new type of organization, best comparable to a digital company, but without an attached legal entity. Made from irrefutable computer code, it is operated entirely by its community Essentially, it’s a non-human specific entity, who’s sole duty is to abide by a specific programmatic set of rules; or by the rules granted to it by decentralized consensus (majority decides what to do in a distributed manner). So far, all contracts we listed were owned and executed by other accounts probably held by humans. But there is no discrimination against robots or humans in the Ethereum ecosystem and contracts can create arbitrary actions like any other account would. Contracts can own tokens, participate in crowdsales, and even be voting members of other contracts. “On the Blockchain, no one knows you’re a fridge” - Richard Brown What is a DAO token A DAO leverages smart contracts on the Ethereum blockchain so that anyone, anywhere in the world can be empowered to participate. In exchange for their early help, participants receive DAO tokens which hold many benefits. Owning DAO tokens functions in a similar way to having shareholder rights in an actual company. By owning DAO tokens… You can submit proposals for funding You can vote on which proposals are funded Receive profits from funded projects Technical The code of a given DAO will be difficult to alter once the system is up and running, including bug fixes that would be trivial in centralised code. Corrections for a DAO would require writing new code and agreement to migrate all the funds. Although the code is visible to all, it is hard to repair, thus leaving known security holes open to exploitation unless a moratorium is called to enable bug fixing. wiki Then there is The DAO...</description>
        <pubDate>Thu, 23 Jun 2016 01:19:48 +0530</pubDate>
        <link>https://lightrains.com/blogs/what-is-dao-decentralized-autonomous-organization</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/what-is-dao-decentralized-autonomous-organization</guid>
        
        <category>DAO</category>
        
        <category>The DAO</category>
        
        
      </item>
    
      <item>
        <title>Compile and Deploy Solidity Contract</title>
        <description>Contracts live on the blockchain in an Ethereum-specific binary format (Ethereum Virtual Machine (=EVM) bytecode). This tutorial explains how to deploy the byte code to Ethereum Blockchain For the frontier release, geth supports solidity compilation through system call to solc, the command line solidity compiler by Christian R. and Lefteris K. Step 1. Install Solidity Compiler Solc Easy way Its very easy to install solc using npm the package manager for NodeJS the command is npm install solc Easier way Browser-Solidity If you just want to try Solidity for small contracts, you can try browser-solidity which does not need any installation. If you want to use it without connection to the Internet, you can also just save the page locally or clone http://github.com/chriseth/browser-solidity. Building from Source Assuming you are using Ubuntu 14.04 sudo apt-add-repository ppa:george-edison55/cmake-3.x sudo apt-get -y update sudo apt-get -y install language-pack-en-base sudo dpkg-reconfigure locales sudo apt-get -y install software-properties-common sudo add-apt-repository -y ppa:ethereum/ethereum sudo add-apt-repository -y ppa:ethereum/ethereum-dev sudo apt-get -y update sudo apt-get -y upgrade And pull the solidity source code git clone --recursive https://github.com/ethereum/webthree-umbrella.git cd webthree-umbrella ./webthree-helpers/scripts/ethupdate.sh --no-push --simple-pull --project solidity # update Solidity repo ./webthree-helpers/scripts/ethbuild.sh --no-git --project solidity --all --cores 4 -DEVMJIT=0 Step 2. Verify Solidity Compiler To ensure solc is installed and ready to use, you can verify it by running eth.getCompilers() in geth console If you have it installed, it should output something like this: ['Solidity' ] Bonus. Compile a simple contract Let us take this simple contract source: source = &quot;contract test { function multiply(uint a) returns(uint d) { return a * 7; } }&quot; This contract offers a unary method: called with a positive integer a, it returns a * 7. You are ready to compile solidity code in the geth JS console using eth.compile.solidity &amp;gt; contract = eth.compile.solidity(source).test { code:...</description>
        <pubDate>Fri, 17 Jun 2016 11:19:48 +0530</pubDate>
        <link>https://lightrains.com/blogs/compile-deploy-solidity-contract-ethereum-console-geth-part-1</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/compile-deploy-solidity-contract-ethereum-console-geth-part-1</guid>
        
        <category>Blockchain</category>
        
        <category>Smart Contract</category>
        
        
      </item>
    
      <item>
        <title>Histup Social Media Wall</title>
        <description>A novel and Unique Method of Digital Branding
We Sync and Brought together the user generated and branded content Social Media Feeds into one place from over four Social Networks.

How Hitsup Works for you
Connect &amp;amp; Merges Social Media Feeds: Connect yours or your company’s social media updates or feeds to a single social Media Wall. Hitsup merges content from any of your social platforms into homogenous streams. So, for instance, one stream can contain posts of Twitter, Facebook and Google+. All posts have the same data-format, no matter where they were composed.

Unified Social Media Content: Hitsup seamlessly integrate unified social content into your website, application or content management system

Configure streams online in your browser.


  Embed Hitsup’s adaptive and beautifully designed stream widget
  Each stream comes with its own profile page
  No technical knowledge required

</description>
        <pubDate>Mon, 13 Jun 2016 11:19:48 +0530</pubDate>
        <link>https://lightrains.com/work/hitsup-social</link>
        <guid isPermaLink="true">https://lightrains.com/work/hitsup-social</guid>
        
        
        <category>Drupal</category>
        
      </item>
    
      <item>
        <title>SCEB Smart Contract Templates for Banking</title>
        <description>SCEB is a platform for financial institutions to take advantage of the blockchain based smart-contracts as templates in everyday banking.

Technology Stack

  Ethereum Blockchain
  Embark Framework
  Solidity - smart-contract language
  IPFS - decentralised file storage


Potential benefits

  Cost Reductions
  Efficiency Improvements
  Reduce Risk
  Reusable contracts
  Less paperwork



</description>
        <pubDate>Mon, 13 Jun 2016 11:19:48 +0530</pubDate>
        <link>https://lightrains.com/work/smart-contract-templates-banking-sceb</link>
        <guid isPermaLink="true">https://lightrains.com/work/smart-contract-templates-banking-sceb</guid>
        
        
        <category>Blockchain</category>
        
        <category>Smart Contract</category>
        
      </item>
    
      <item>
        <title>Canned Emails</title>
        <description>Canned Emails is a minimal site with prewritten emails, useful for people who prefer easy way of doing things.

Canned Emails officially introduced in Google Labs: Canned Responses on Tuesday, October 21, 2008 by Chad Parry, Gmail engineer

How to enable Canned Responses in Gmail


  The upper right-hand corner of Gmail, then choose Settings.
  Click the Labs tab, find Canned Responses, click the Enable radio button to enable Canned Responses, scroll down and click Save Changes.
  Compose an email message you’d like to use over and over again, and then click the arrow in the lower right-hand corner of the message window.
  The next time someone emails you something that warrants the canned response you created, reply to the message and instead of typing your response, click the arrow button in the lower right-hand corner, select Canned Responses, and then under Insert, choose the canned response you created in the previous step. You’ll then see your response appear in the body of your reply.

</description>
        <pubDate>Mon, 13 Jun 2016 11:19:48 +0530</pubDate>
        <link>https://lightrains.com/work/canned-emails</link>
        <guid isPermaLink="true">https://lightrains.com/work/canned-emails</guid>
        
        
        <category>Open Source</category>
        
      </item>
    
      <item>
        <title>MetroMatinee</title>
        <description>MetroMatinee is a top entertainment Malayalam movie website, providing the latest daily Malayalam movie and celebrity news inside information in a fun, irreverent tone.

Why Drupal was chosen:
Drupal was really the only considered platform for this project. Drupal is so flexible, and with an excellent API framework can accommodate almost all conceivable functionalty. Having worked with Drupal on many enterprise projects, we knew it could handle the expectations of such an important client.

Project (goals, requirements and outcome):
Technically there were a few key requirements:


  The site must be easy for content editors to manage (of course!)
  New articles should be (optionally) pushed to Facebook
  Existing users must be easily migrated to the new site, along with their previous profile and comments
  The UX must be truly responsive and engaging on all devices
  Content pages must be built from existing collections of text, quote, image, and audio “stories”
  The site must be able to handle large surges of visitors and traffic spikes - many thousands of concurrent visitors


Key modules/theme/distribution used:


  Views
  Entity API
  Entity reference
  Entity Reference View Widget
  Media
  Facebook API
  Comment block
  Chaos tool suite (ctools)
  Feeds
  Cookie Control
  CDN

</description>
        <pubDate>Mon, 13 Jun 2016 11:19:48 +0530</pubDate>
        <link>https://lightrains.com/work/metromatinee</link>
        <guid isPermaLink="true">https://lightrains.com/work/metromatinee</guid>
        
        
        <category>Drupal</category>
        
      </item>
    
      <item>
        <title>Kerala Startup Mission</title>
        <description>Kerala Startup Mission (KSUM) is India’s first and successful Non Academic Business Incubator, hosted and housed inside Asia’s Largest IT Park Technopark.

We dedicated 2 weeks for a comprehensive study of the information architecture. Having analyzed a suitable structure model for the content, we were able to start the wire-framing stage. Wireframes helped us interconnect all kinds of content types and entities of the website. We took full advantage of Drupal 7 and its new features. The fact that all entities come with fields helped us to create all the interconnections through references.

Overall, the fact that the client was very clear about their requests and needs from the beginning was enormously helpful in our effort to focus more on the concept, the design and the development. Requirements being met, the whole project kept us busy for 5 months. We exclusively worked with SCRUM methods, delivering segments of the website every 10 days.

Why Drupal was chosen:
Drupal was chosen because of its wide variety of contributed modules and community support

Key modules/theme/distribution used:

  Organic groups
  Views
  Flag
  Rules
  ImageCache
  Feeds
  Facebook Style Statuses

</description>
        <pubDate>Mon, 13 Jun 2016 11:19:48 +0530</pubDate>
        <link>https://lightrains.com/work/kerala-startup-mission</link>
        <guid isPermaLink="true">https://lightrains.com/work/kerala-startup-mission</guid>
        
        
        <category>Drupal</category>
        
      </item>
    
      <item>
        <title>Fungible Loyalty Tokens</title>
        <description>Flot is a blockchain based Inter-Operable Fungible Loyalty Tokens. The ides is to bring all non-competing business into one umbrella and let them share the value of Loyalty Points together hence inter-operable.

Flot is first presented in “ICICI Appathon”, its mobile app development challenge. Flot got special mention from the Jury. The jury comprised Mr. Rajiv Sabharwal, Executive Director, ICICI Bank; Mr. Anup Gupta, Managing Director, Nexus Venture Partners; Mr. Ashish Kumar, Vice President - Cloud, IBM Asia Pacific; and Mr. T.R. Ramachandran, Group Country Manager-India &amp;amp; South Asia, VISA.

Key elements


  Loyalty points are fungible across platforms
  Tamper proof storage
  Fungibility
    
      Convertible to Fiat Money/Crypto-currency
      Inter-Operable
    
  
  Seamless integration with any other platforms.
  Easy to manage redeems, no double spend.
  Offers and vouchers can be executed as a smart-contract
  Multiple activities can trigger loyalty points
  Easy to manage micro-loyalty points

</description>
        <pubDate>Mon, 13 Jun 2016 11:19:48 +0530</pubDate>
        <link>https://lightrains.com/work/flot-blockchain-loyalty-tokens</link>
        <guid isPermaLink="true">https://lightrains.com/work/flot-blockchain-loyalty-tokens</guid>
        
        
        <category>Blockchain</category>
        
        <category>Ethereum</category>
        
        <category>Smart Contract</category>
        
      </item>
    
      <item>
        <title>Solo PDF Reader</title>
        <description>Solo PDF Reader is simply the best, fast and light PDF reader for rendering PDF files easily. The clean and elegant interface make reading a pleasure. Slide through the pages smoothly as it feels just like reading a real book. Solo PDF Reader automatically scan your device and external memory for PDF files and fetch them immediately after you launch it. The application consumes less memory without any compromise in performance. You will love Solo PDF Reader once you start using it.
Solo PDF Reader supports multi-touch zooming, text search, portrait and landscape orientations. More than 50,000 users now use Solo PDF to access, read and share a large variety of PDF types, including documents, portfolios, scanned files, images etc.

Solo PDF Reader is free to download. No hidden charges.

  Compatible with almost every Android device.
  Solo PDF Reader is the best available app for reading pdf files.


Features


  Solo PDF Reader is faster compared to other Android PDF readers.
  View and access recently viewed documents using ‘Recent’ menu.
  Easily switch to any page using the slide bar.
  Automatically restore last read pages.
  Last viewed date available.


Show some love; Share Solo PDF Reader via Facebook, Twitter, LinkedIn.
</description>
        <pubDate>Mon, 13 Jun 2016 11:19:48 +0530</pubDate>
        <link>https://lightrains.com/work/solo-pdf-reader</link>
        <guid isPermaLink="true">https://lightrains.com/work/solo-pdf-reader</guid>
        
        
        <category>Android</category>
        
      </item>
    
      <item>
        <title>How to setup a local test Ethereum Blockchain</title>
        <description>Setting up a private chain is useful for testing purposes or simply for playing around with, I couldn’t find a good tutorial on it so I thought I would write my own. In this tutorial we are working on Ubuntu 14.04 LTS and Go Implementation of Ethereum go-ethereum or simply geth Prerequisites geth ubuntu 14.04 The Fist Block - Genesis Block The Genesis block is the start block of the Blockchain - the first block, block 0, the only block that does not point to a predecessor block. It’s the entry point into the Blockchain database. The Genesis data defines initial parameters of the database and defines a cryptographically valid entry block. You might think thats a flaw in the system being able to decide the starting conditions of the chain, but the consensus algorithm will ensure that no other node will agree with your version of the blockchain unless they have the same genesis block (and some other crucial parameters, discussed later). How to Create Genesis Block Great, so how do we make one of these genesis blocks? Well its fairly simple the following JSON is all you really need: { &quot;nonce&quot;: &quot;0x0000000000000042&quot;, &quot;mixhash&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;, &quot;difficulty&quot;: &quot;0x4000&quot;, &quot;alloc&quot;: {}, &quot;coinbase&quot;: &quot;0x0000000000000000000000000000000000000000&quot;, &quot;timestamp&quot;: &quot;0x00&quot;, &quot;parentHash&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;, &quot;extraData&quot;: &quot;Custem Ethereum Genesis Block&quot;, &quot;gasLimit&quot;: &quot;0xffffffff&quot; } Save the JSON into a file lets call it genesis.json and save in your home directory. $ geth --genesis &amp;lt;genesis json file path&amp;gt; --datadir &amp;lt;some path to an empty folder&amp;gt; --networkid 123 --nodiscover --maxpeers 0 console This command does a few things: It utilises the genesis block json to seed the blockchain It uses the datadir to store all state necessary to maintain the newly created blockchain and other data (declared to prevent you clobbering your main net data, wouldn’t want to overwrite all those blocks...</description>
        <pubDate>Mon, 13 Jun 2016 11:19:48 +0530</pubDate>
        <link>https://lightrains.com/blogs/setup-local-ethereum-blockchain-private-testnet</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/setup-local-ethereum-blockchain-private-testnet</guid>
        
        <category>Private Blockchain</category>
        
        <category>Blockchain</category>
        
        <category>Ethereum</category>
        
        <category>Testnet</category>
        
        
      </item>
    
      <item>
        <title>What is Ethereum</title>
        <description>Ethereum is a public blockchain-based distributed computing platform, featuring smart contract functionality. It provides a decentralized virtual machine, the Ethereum Virtual Machine (EVM), that can execute peer-to-peer contracts using a cryptocurrency called ether.


  Applications build with Ethereum do not cover all use cases of course, but have specific properties that make them unique:
  Ethereum applications always execute the code they say they will - there is no ‘security through obscurity’. I don’t need to ‘trust’ anything or anyone, because I can check the app code myself.
  Ethereum applications are always available, and are guaranteed to be available in the future. There is no downtime.
Ethereum applications are resistant to many attacks including denial of service (DDoS), which are rendered moot.


Important links

  ethereum.org
  wiki



</description>
        <pubDate>Mon, 13 Jun 2016 11:19:48 +0530</pubDate>
        <link>https://lightrains.com/blogs/what-is-ethereum</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/what-is-ethereum</guid>
        
        <category>Ethereum</category>
        
        <category>Cryptocurrency</category>
        
        
      </item>
    
      <item>
        <title>What is Bitcoin the currency</title>
        <description>Bitcoin is a form of digital currency, created and held electronically. No one controls it. Bitcoins aren’t printed, like dollars or euros – they’re produced by people, and increasingly businesses, running computers all around the world, using software that solves mathematical problems. What makes it different from normal currencies? Bitcoin can be used to buy things electronically. In that sense, it’s like conventional dollars, euros, or yen, which are also traded digitally. However, bitcoin’s most important characteristic, and the thing that makes it different to conventional money, is that it is decentralized. No single institution controls the bitcoin network. This puts some people at ease, because it means that a large bank can’t control their money. Who created it? A software developer called Satoshi Nakamoto proposed bitcoin, which was an electronic payment system based on mathematical proof. The idea was to produce a currency independent of any central authority, transferable electronically, more or less instantly, with very low transaction fees. Why Bitcoins? Bitcoins can be used to buy merchandise anonymously. In addition, international payments are easy and cheap because bitcoins are not tied to any country or subject to regulation. Small businesses may like them because there are no credit card fees. Some people just buy bitcoins as an investment, hoping that they’ll go up in value. Characteristics of Bitcoin Decentralized Easy to set up Anonymous Transparent Minimal Transaction fee Fast transaction Non-repudiable How does one acquire bitcoins? As payment for goods or services. Purchase bitcoins at a Bitcoin exchange. Exchange bitcoins from anyone. Earn bitcoins through mining. Advantage/Disadvantage of Bitcoin Advantages: Payment Freedom:- It is possible to send and receive bitcoins anywhere in the world at any time Less transaction Fees:- No fee to receive bitcoins. You can choose your transaction fee and many wallets let you control how...</description>
        <pubDate>Mon, 13 Jun 2016 11:19:48 +0530</pubDate>
        <link>https://lightrains.com/blogs/what-is-bitcoin-currency</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/what-is-bitcoin-currency</guid>
        
        <category>Bitcoin</category>
        
        <category>Principles</category>
        
        <category>Cryptocurrency</category>
        
        
      </item>
    
      <item>
        <title>Cryptocurrency 101 - Part 2/3 - Why use cryptocurrencies instead of cash?</title>
        <description>This is probably the most common question asked.
First, we need to take a look at the evolution of trade:


  Initially, trade was done through a barter system. You have an asset I want, I have an asset you want, let’s trade. Here, a apple farmer can trade his apples to a sheep herder for wool.
  Here, we run into a problem. What if you don’t have something I want? Metals, particularly gold and silver, were often used as a mechanism for trade.
  With the rise of kingdoms and nations, many wanted to show their reign and would melt metals and recast them to showcase an emblem with their nation.
  Eventually, nations realized that metals weren’t efficient, and paper money was created.
  With the rise of the internet, we now have online banking, where currency is just digital figures.


This is a simple look, but it’s obvious that cryptocurrencies are the next evolution of trade.


  Like most features in evolution, the unregulated — capitalistic supply/demand — aspect is based off the Great Recession of 2007.




Sources


  http://bitcoin.stackexchange.com/q/182/30316
  https://medium.com/@sebfung/cryptocurrencies-101-c1c0a5a3cc2

</description>
        <pubDate>Tue, 12 Jan 2016 00:00:00 +0530</pubDate>
        <link>https://lightrains.com/blogs/cryptocurrency-101-why-use-cryptocurrencies-instead-cash</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/cryptocurrency-101-why-use-cryptocurrencies-instead-cash</guid>
        
        <category>Cryptocurrency</category>
        
        <category>Handbook</category>
        
        
      </item>
    
      <item>
        <title>Cryptocurrency 101 - Part 1/3 - The Basics</title>
        <description>What is a Cryptocurrency? A cryptocurrency is essentially an alternative virtual currency that can be used to buy and sell goods and services in the same way as a traditional “fiat” currency. Transactions are made via a secure encrypted channel to transfer money between virtual “wallets”, without needing to go through a traditional bank or credit card provider. Cryptocurrencies make it easier to transfer funds between two parties in transactions; these transfers are facilitated through the use of public and private keys for security purposes. These fund transfers are done with minimal processing fees, enabling users to avoid the steep fees charged by most banks and financial institutions for wire transfers. How it works Cryptocurrencies are a bit different to traditional currencies. They offer a “decentralized” medium of exchange, which means that they derive their value from their community of users, unlike traditional currencies that are controlled by central banks and government regulation. This means that the value can fluctuate a lot more like a stock or commodity, dependent on the amount of supply and demand for that currency. What gives them their value? They have value because they are scarce, fungible (one Bitcoin is as good as another), easily transferred, and easily verified. The only other component they need to have value is a general agreement that they will be used as a medium of exchange or a prevailing belief that they will be in the future. It is the variation in these two factors that accounts for most of the volatility in the value of Bitcoins today. They aren’t backed by anything because they’re a commodity. What is gold backed by? Prices are based on supply and demand, the rate at which a cryptocurrency can be exchanged for another. Advantages of Cryptocurrency 1. Land of the Free With...</description>
        <pubDate>Fri, 08 Jan 2016 00:00:00 +0530</pubDate>
        <link>https://lightrains.com/blogs/cryptocurrency-101</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/cryptocurrency-101</guid>
        
        <category>Cryptocurrency</category>
        
        <category>Handbook</category>
        
        
      </item>
    
      <item>
        <title>Pegke Loyalty</title>
        <description>Pegke Customer Loyalty &amp;amp; Rewards Software that not only rewards the customers for their brand loyalty but also makes the customers stay loyal to their favorite franchises. Pegke is an easy-to-use software designed and shaped elegantly by Technopark engineers that is advantageous to both the business and customers. After setting up their account, the business owners are able to set loyalty points for specific sales and are also able to reward customers based on their accumulated points and redeemable items. Pegke Loyalty helps in measuring how successfully your marketing strategies are turning out to be. How often the customers are revisiting the store and what drives them the most. When it comes to marketing we have a built in platform for merchants to target their prospective customers based on geographical area as well as their purchase interest. Why Drupal was chosen: Leveraging Drupal 7, unleashed Technologies was able to develop an enterprise platform that would empower Pegke and its franchisees to control and manage their offers and increase revenues through improved user experience and SEO capabilities. High quality contributed modules which enable it to scale well to support very high traffic. Out of the box rich content management features and can be extended to match the very specific requirements of our website. An intuitive admin interface, enabling our web editorial team to update the site quickly and easily Key modules/theme/distribution used: Advanced CSS/JS Aggregation Location Metatag Views Ubercart Session Limit Token Support Ticketing System Mandrill Why these modules/theme/distribution were chosen: Advanced CSS/JS Aggregation: Make sure we are not making too many unnecessary http requests and wasting our resources. Location: Location is our primary feature, we wanted to get it working as quick as possible with a pre-planned manner and Location fits our needs. Metatag: Metatag is one of the unavoidable...</description>
        <pubDate>Sat, 13 Jun 2015 11:19:48 +0530</pubDate>
        <link>https://lightrains.com/work/pegke-loyalty</link>
        <guid isPermaLink="true">https://lightrains.com/work/pegke-loyalty</guid>
        
        
        <category>Drupal</category>
        
      </item>
    
      <item>
        <title>PSC HUB is now available as Telegram Bot</title>
        <description>Now Telegram Messenger Users can Get PSC HUB - Kerala PSC Questions as a Telegram Bot, Through this users can


  Get Random Questions in a Chat
  Realtime Questions
  Your Statistics
  Instant Support


How I get this Inside Telegram Messenger


  Open Telegram Messenger
  Search for “pschub”
  You will see “PSC HUB Bot”
  Just start the bot and enjoy.
  Or Simply Click HERE


What is a Bot
Bots are simply Telegram accounts operated by software – not people – and they’ll often have AI features. They can do anything – teach, play, search, broadcast, remind, connect, integrate with other services, or even pass commands to the Internet of Things.
</description>
        <pubDate>Sun, 17 May 2015 11:19:48 +0530</pubDate>
        <link>https://lightrains.com/blogs/psc-hub-kerala-psc-questions-available-telegram-bot</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/psc-hub-kerala-psc-questions-available-telegram-bot</guid>
        
        <category>Products</category>
        
        <category>Telegram</category>
        
        
      </item>
    
  </channel>
</rss>
