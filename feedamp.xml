<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lightrains Technolabs AMP Pages</title>
    <description>Engineering Blockchain and Smart contracts.</description>
    <link>https://lightrains.com/</link>
    <atom:link href="https://lightrains.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 21 Sep 2016 11:56:20 +0530</pubDate>
    <lastBuildDate>Wed, 21 Sep 2016 11:56:20 +0530</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
    
      <item>
        <title>Introduction to Tmux</title>
        <description>tmux is a “terminal multiplexer”, it enables a number of terminals (or windows) to be accessed and controlled from a single terminal. tmux is intended to be a simple, modern, BSD-licensed alternative to programs such as GNU screen. Install tmux. tmux depends on libevent 2.x. Download it from: libevent.org From source By default, tmux will use the utempter library to update utmp(5), if it is installed. Run configure with --disable-utempter to disable this. To build tmux from a release tarball, do: $ ./configure &amp;amp;&amp;amp; make $ sudo make install To get and build the latest from version control: $ git clone https://github.com/tmux/tmux.git $ cd tmux $ sh autogen.sh $ ./configure &amp;amp;&amp;amp; make Install tmux in Mac OSX Yes, you can do brew install tmux Starting Tmux You can start a tmux session by tmux attach or simply tmux a command. Managing the configuration. You can manage all the configurations with .tmux.conf file. Which will reside in your home folder. You can check with cat ~/.tmux.conf to see whether there is any. Multiple Pane Synchronization What setw synchronise-panes gives us is that it simultaneously sends keyboard input from one pane to the rest of the panes. (In this case, we can...</description>
        <pubDate>Sat, 03 Sep 2016 05:10:00 +0530</pubDate>
        <link>https://lightrains.com/amp/blogs/tmux-tips/index.html</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/tmux-tips</guid>
        
        <category>Development Tools</category>
        
        <category>Tmux</category>
        
        <category>Tools</category>
        
        
      </item>
    
      <item>
        <title>What is Private Permissioned Blockchain</title>
        <description>Properly permissioned blockchain networks differ from unpermissioned blockchain networks solely based on the presence (or absence) of an access control layer built into the blockchain clients.

The first primary difference between a properly conceived permissioned blockchain network and an unpermissioned blockchain network is whether the participants in the network have an ability to restrict who can participate in the consensus mechanism of the blockchain’s network.

Permissioned blockchain networks allow the network to appoint a group of participants in the network who are given the express authority to provide the validation of blocks of transactions. Or, to participate in the consensus mechanism.

Why do we need Permissioned Blockchain

To understand the benefits of permissioned blockchain networks to their participants, we must consider the relative advantages which they have vis a vis their unpermissioned cousins.

We must also consider the relative advantages which permissioned blockchain networks have vis a vis their cousins on the other side of the spectrum: hub and spoke distributed databases.


  Governance Over A Permissioned Blockchain is Clearly Defined
  More Cost Effective
  Extra layer of security is there. (could be)


Sources

  https://docs.erisindustries.com

</description>
        <pubDate>Fri, 12 Aug 2016 05:10:00 +0530</pubDate>
        <link>https://lightrains.com/amp/blogs/what-private-permissioned-blockchain/index.html</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/what-private-permissioned-blockchain</guid>
        
        <category>Blockchain</category>
        
        <category>Private Blockchain</category>
        
        <category>Permissioned Blockchain</category>
        
        
      </item>
    
      <item>
        <title>Blockchain for Insurance Industry</title>
        <description>Insurance companies have been traditionally slow to drive adoption in technologies. These innovation strategies and initiatives are aimed at retaining customers and optimizing pricing and tradability of services. Insurers who have trust at the heart have begun to appreciate with technologies such as blockchain because they believe that a “trustless” system (which pushes identity management, ownership and management of data and processes to the customer) may provide genuine long-term strategic benefits. Whats is meant by trust-less: The greatest advantage of blockchains is its decentralized protocol which is often referred as “Trust to the trust-less world”. Because every part of the system is continually checking and approving the work of the others. Therefore, if any piece of information will be changed on one machine, it won’t be approved by the others as all of them hold the same record. In the banking industry, several blockchain use conditions are being integrated, which range from customer-facing repayment technology to switch and trading services.While the insurance industry (in conditions of technology adoption) lags behind banking, it is nevertheless uniquely positioned to reap the benefits of blockchain technology. Blockchain can address the competitive challenges many incumbents face, including poor customer engagement, limited growth in mature...</description>
        <pubDate>Fri, 12 Aug 2016 05:10:00 +0530</pubDate>
        <link>https://lightrains.com/amp/blogs/blockchain-for-insurance-industry/index.html</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/blockchain-for-insurance-industry</guid>
        
        <category>Blockchain</category>
        
        <category>Whitepaper</category>
        
        
      </item>
    
      <item>
        <title>What Is Bitcoin and how is it useful</title>
        <description>Bitcoin is a decentralized digital currency, created and held electronically. No one controls it. They’re not printed, produced by people, and increasingly businesses, running computers all around the world, using software that solves mathematical problems. Satoshi Nakamoto, a software developer proposed bitcoin, which was an electronic payment system based on mathematical proof. Idea was to produce a currency independent of any central authority, transferable electronically, more or less instantly, with very low transaction fees. Characteristics of Bitcoin Decentralized Easy to set up Anonymous Transparent Minimal Transaction fee Fast transaction Non-repudiable How does one acquire bitcoins? As payment for goods or services. Purchase bitcoins at a Bitcoin exchange. Exchange bitcoins from anyone. Earn bitcoins through mining. Advantage/Disadvantage of Bitcoin Advantages: Payment Freedom:- It is possible to send and receive bitcoins anywhere in the world at any time Less transaction Fees:- No fee to receive bitcoins. You can choose your transaction fee and many wallets let you control how large a fee to pay when spending. Risk Free:- Bitcoin transactions are secure, irreversible, and do not contain customers’ sensitive or personal information. Highly secured:- Bitcoin payments can be made without personal information tied to the transaction thus offers strong protection against identity...</description>
        <pubDate>Tue, 09 Aug 2016 05:10:00 +0530</pubDate>
        <link>https://lightrains.com/amp/blogs/bitcoin-how-is-useful/index.html</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/bitcoin-how-is-useful</guid>
        
        <category>Bitcoin</category>
        
        <category>Cryptocurrency</category>
        
        
      </item>
    
      <item>
        <title>ES6 Transpilers</title>
        <description>What is a Transpiler A source-to-source compiler, transcompiler or transpiler is a type of compiler that takes the source code of a program written in one programming language as its input and produces the equivalent source code in another programming language. A source-to-source compiler translates between programming languages that operate at approximately the same level of abstraction, while a traditional compiler translates from a higher level programming language to a lower level programming language. wiki List of ES6 Transpilers Babel: To transpile ES6 into ES5 for static builds Babelify: To incorporate babel into your Gulp, Grunt, or npm run build process Traceur compiler: ES6 features &amp;gt; ES5. Includes classes, generators, promises, destructuring patterns, default parameters &amp;amp; more. es6ify: Traceur compiler wrapped as a Browserify v2 transform ES6 to ES5 Transpilation Example For this example we are using Babel’s live transpiler to see the code in action. ES6 Code import config from './config/env'; import app from './config/express'; // listen on port config.port app.listen(config.port, () =&amp;gt; { debug(`server started on port ${config.port} (${config.env})`); }); export default app; ES5 Converted 'use strict'; Object.defineProperty(exports, &quot;__esModule&quot;, { value: true }); var _env = require('./config/env'); var _env2 = _interopRequireDefault(_env); var _express = require('./config/express'); var _express2 =...</description>
        <pubDate>Sun, 07 Aug 2016 05:10:00 +0530</pubDate>
        <link>https://lightrains.com/amp/blogs/es6-transpilers/index.html</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/es6-transpilers</guid>
        
        <category>ES6</category>
        
        <category>Transpiler</category>
        
        <category>Ecmascript 6</category>
        
        
      </item>
    
      <item>
        <title>Getting started with Solidity.</title>
        <description>Solidity is a high-level language whose syntax is similar to that of JavaScript and it is designed to compile to code for the Ethereum Virtual Machine. As you will see, it is possible to create contracts for voting, crowdfunding, blind auctions, multi-signature wallets and more.

Solidity is the programming language that we use to create Etherem based Smart Contracts.

I have covered the steps to install Solidity in my previous blog Compile and Deploy Solidity
Contract

Data Types

Booleans

  bool: The possible values are constants true and false.


Operators:


  ! (logical negation)
  &amp;amp;&amp;amp; (logical conjunction, “and”)
  
    
      
        
           
          (logical disjunction, “or”)
        
      
    
  
  == (equality)
  != (inequality)


Integers

int / uint: Signed and unsigned integers of various sizes. Keywords uint8 to uint256 in steps of 8 (unsigned of 8 up to 256 bits) and int8 to int256. uint and int are aliases for uint256 and int256, respectively.

Address
address: Holds a 20 byte value (size of an Ethereum address). Address types also have members and serve as base for all contracts.

Next we will look into Expressions and Control Structures

Source


  Official Docs
  Types

</description>
        <pubDate>Mon, 01 Aug 2016 09:10:00 +0530</pubDate>
        <link>https://lightrains.com/amp/blogs/ethereum-solidity-getting-started/index.html</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/ethereum-solidity-getting-started</guid>
        
        <category>Ethereum</category>
        
        <category>Solidity</category>
        
        <category>EVM</category>
        
        
      </item>
    
      <item>
        <title>ECMAScript 6 Classes.</title>
        <description>ECMAScript 6 (ES6, often referred to as Harmony) is the upcoming sixth major release of the ECMAScript language specification.The technology bringing a lot of amazing features that we will need to know. One of the main feature that introducing by the ES6 is “Javascript Classes”. Classes Classes are the main new OOP paradigm in ES6 which make code syntatic sugar.That means classes make prototype-based OO pattern much simpler and boosts interoperability.Classes supports inheritance,instance and static methods which makes ES6 more user friendly. Class body and methods The body of a class is enclosed in curly braces {}.Here we can define methods or constructors. Constructor: A special method for creating and initializing an object created with a class. Example: class Number{ constructor(num1, num2) { this.num1 = num1; this.num2 = num2; } calcSum() { return this.num1 + this.num2; } getSum(){ return this.calcSum(); } } numOperation = new Number(20, 10); console.log(numOperation.getSum); Subclassing using extend keyword: The extends keyword is used in class declarations or class expressions to create a class as a child of another class. Example: class Animal { constructor(name) { this.name = name; } speak() { console.log(this.name + ' makes a noise.'); } } class Dog extends Animal { speak() {...</description>
        <pubDate>Mon, 01 Aug 2016 02:10:00 +0530</pubDate>
        <link>https://lightrains.com/amp/blogs/es6-classes/index.html</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/es6-classes</guid>
        
        <category>ES6</category>
        
        <category>Ecmascript 6</category>
        
        <category>ES6 Tutorials</category>
        
        
      </item>
    
      <item>
        <title>Bitcoins most Intriguing Qualities</title>
        <description>Bitcoin is an innovative payment network and a new kind of money. Find all you need to know and get started with Bitcoin on bitcoin.org.Some of Bitcoin’s Most Intriguing Qualities Bitcoin Cryptocurrency A cryptocurrency (or crypto currency) is a medium of exchange using cryptography to secure the transactions and to control the creation of additional units of the currency.[1] Cryptocurrencies are a subset of alternative currencies, or specifically of digital currencies. wiki Bitcoin and bitcoin Aren’t the Same Bitcoin with a capital ‘B’ is used when referring to the network, while the currency is spelt with a small ‘b’. There Will Only Ever Be 21 Million bitcoins we can accurately predict, almost to the exact hour, the date the 21 millionth, and last, bitcoin will enter circulation. Bitcoin is Operated by Users, Not Institutions Bitcoin is run through a peer-to-peer network, meaning that there is no central control, but rather the control is decentralised throughout the user base. bitcoins Aren’t Minted; They’re Mined Unlike traditional currency, bitcoins exist as a result of a production process called mining. People use computers to solve complex mathematical algorithms in order to introduce new bitcoins into the economy. bitcoins Are Stored in Digital Wallets,...</description>
        <pubDate>Fri, 29 Jul 2016 12:23:22 +0530</pubDate>
        <link>https://lightrains.com/amp/blogs/intriguing-qualities-of-bitcoin/index.html</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/intriguing-qualities-of-bitcoin</guid>
        
        <category>Bitcoin</category>
        
        <category>Blockchain</category>
        
        <category>Cryptocurrency</category>
        
        
      </item>
    
      <item>
        <title>ES6 Data Structures</title>
        <description>ES6 introduces many new features to embrace the developer as well as the browsers to perform
in a optimal performant way.

Set
Set is new type of data structure that we can use to store Unique values which can be of
any type but they must all be uniqie.

Create a Set

To create a set we use Set constructor var mySet = new Set();

Add Values to set

let myArray = [1, 4, 1, 5, 5, 7, 8, 9, 0, 0]
let mySet = new Set(myArray)



Now if you do a console.log(mySet); you will see
Set {1, 4, 5, 7, 8, 9, 0}

Map

Map is similar to Set but it manges key-value pair instead of individual values.

Create a Map

var myMap = new Map(); will create an instance of Map and to add values to it we can do let
myOtherMap = new Map([['a', 2], [1, 'b']])

console.log(myOtherMap); will show Map {&quot;a&quot; =&amp;gt; 2, 1 =&amp;gt; &quot;b&quot;}

WeakSet and WeakMap
Similar to regular Map and Set but the difference is that the object references inside them are
held weakly. So it wont prevent garbage collection.
</description>
        <pubDate>Tue, 26 Jul 2016 09:10:12 +0530</pubDate>
        <link>https://lightrains.com/amp/blogs/es6-data-structres/index.html</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/es6-data-structres</guid>
        
        <category>ES6</category>
        
        <category>ES6 Tutorials</category>
        
        <category>Ecmascript 6</category>
        
        
      </item>
    
      <item>
        <title>Function parameters in es6</title>
        <description>There are 2 types of function parameters available in es6, Default Parameters Rest Parameters Default Parameter Default parameter are a way to pass a value to the function parameter when there is no value is being passed by the callee during invocation. We specify this value when defining a function, function printName ( name = 'there' ) { return `Hello, ${name}` } We can even use the default parameter of one parameter as part of an expression for another paramter. For eg: function printName ( name = 'there', fullname = name + ' lastName' ) { return `Hello, ${name} - ${fullname} ` } Rest Parameters The rest parameter syntax allows us to represent an indefinite number of arguments as an array. This is achieved by using a new operator called Spread Operator which is represented by ... 3dots Spread Operator It is used when we want to pass an array to a function as individual arguments of that function. For eg: function sum (x, y, z ) { return x + y + z; } let values = [1, 2, 3] // notice the usage of ... sum(...values) Another Example function f(x, ...y) { // y is an Array return...</description>
        <pubDate>Wed, 20 Jul 2016 09:12:00 +0530</pubDate>
        <link>https://lightrains.com/amp/blogs/function-parameteres-ecmascript6-es6/index.html</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/function-parameteres-ecmascript6-es6</guid>
        
        <category>ES6</category>
        
        <category>ES6 Tutorials</category>
        
        <category>Ecmascript 6</category>
        
        
      </item>
    
      <item>
        <title>Common useful JavaScript snippets for geth</title>
        <description>This is a collection of common useful scripts that are handy when you do any kind of developemt on the Ethereum Virtual Machine aka EVM. This collection of scripts are availabe in github niksmac/ethereum-scripts 1. Print Block Details This function is uswful when you want to print the details of a block in the console function printBlock(block) { console.log(&quot;Block number : &quot; + block.number + &quot;\n&quot; + &quot; hash : &quot; + block.hash + &quot;\n&quot; + &quot; parentHash : &quot; + block.parentHash + &quot;\n&quot; + &quot; nonce : &quot; + block.nonce + &quot;\n&quot; + &quot; sha3Uncles : &quot; + block.sha3Uncles + &quot;\n&quot; + &quot; logsBloom : &quot; + block.logsBloom + &quot;\n&quot; + &quot; transactionsRoot: &quot; + block.transactionsRoot + &quot;\n&quot; + &quot; stateRoot : &quot; + block.stateRoot + &quot;\n&quot; + &quot; miner : &quot; + block.miner + &quot;\n&quot; + &quot; difficulty : &quot; + block.difficulty + &quot;\n&quot; + &quot; totalDifficulty : &quot; + block.totalDifficulty + &quot;\n&quot; + &quot; extraData : &quot; + block.extraData + &quot;\n&quot; + &quot; size : &quot; + block.size + &quot;\n&quot; + &quot; gasLimit : &quot; + block.gasLimit + &quot;\n&quot; + &quot; gasUsed : &quot; + block.gasUsed + &quot;\n&quot; + &quot; timestamp : &quot; + block.timestamp + &quot;\n&quot;...</description>
        <pubDate>Fri, 15 Jul 2016 11:19:48 +0530</pubDate>
        <link>https://lightrains.com/amp/blogs/useful-ethereum-geth-javascript-snippets/index.html</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/useful-ethereum-geth-javascript-snippets</guid>
        
        <category>Blockchain</category>
        
        <category>Ethereum</category>
        
        <category>geth</category>
        
        <category>go-ethereum</category>
        
        
      </item>
    
      <item>
        <title>Introduction to IPFS</title>
        <description>IPFS is a peer-to-peer distributed file system that seeks to connect all computing devices with the same system of files. In some ways, IPFS is similar to the World Wide Web, but IPFS could be seen as a single BitTorrent swarm, exchanging objects within one Git repository. In other words, IPFS provides a high-throughput, content-addressed block storage model, with content-addressed hyperlinks. What is IPFS? From their README: IPFS is a distributed file system that seeks to connect all computing devices with the same system of files. In some ways, this is similar to the original aims of the Web, but IPFS is actually more similar to a single bittorrent swarm exchanging git objects. IPFS could become a new major subsystem of the internet. If built right, it could complement or replace HTTP. It could complement or replace even more. It sounds crazy. It is crazy. HTTP is inefficient and expensive HTTP downloads a file from a single computer at a time, instead of getting pieces from multiple computers simultaneously. With video delivery, a P2P approach could save 60% in bandwidth costs. The web’s centralization limits opportunity The Internet has been one of the great equalizers in human history and a...</description>
        <pubDate>Tue, 05 Jul 2016 00:12:49 +0530</pubDate>
        <link>https://lightrains.com/amp/blogs/ipfs-introduction/index.html</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/ipfs-introduction</guid>
        
        <category>IPFS</category>
        
        <category>Decentralization</category>
        
        
      </item>
    
      <item>
        <title>What is DAG in Ethereum Blockchain</title>
        <description>Dagger Hashimoto is a proposed spec for the mining algorithm for Ethereum 1.0. Dagger Hashimoto aims to simultaneously satisfy two goals: ASIC-resistance: the benefit from creating specialized hardware for the algorithm should be as small as possible, ideally to the point that even in an economy where ASICs have been developed the speedup is sufficiently small that it is still marginally profitable for users on ordinary computers to mine with spare CPU power. Light client verifiability: a block should be relatively efficiently verifiable by a light client. Why do we need DAG in Ethereum? Ethereum uses Ethash (Proof of Work system). as of now Ethash PoW is memory hard, making it basically ASIC resistant. This basically means that calculating the PoW requires choosing subsets of a fixed resource dependent on the nonce and block header. This resource (a few gigabyte size data) is called a DAG. Clients wishing to store the DAG in a cache should conform to this spec in order to share the cache with other clients: Where is DAG stored The DAG should be stored in a 1GB dump (for the initial epoch, anyway), in a file: Mac/Linux: $(HOME)/.ethash/full-R&amp;lt;REVISION&amp;gt;-&amp;lt;SEEDHASH&amp;gt; Windows: $(HOME)/Appdata/Local/Ethash/full-R&amp;lt;REVISION&amp;gt;-&amp;lt;SEEDHASH&amp;gt; Format Each file should begin with...</description>
        <pubDate>Sun, 03 Jul 2016 00:07:20 +0530</pubDate>
        <link>https://lightrains.com/amp/blogs/dag-ethereum-blockchain/index.html</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/dag-ethereum-blockchain</guid>
        
        <category>Blockchain</category>
        
        <category>DAG</category>
        
        <category>Principles</category>
        
        
      </item>
    
      <item>
        <title>ECMAScript 6</title>
        <description>ECMAScript 6, also known as ECMAScript 2015, is the latest version of the ECMAScript standard. ES6 is a significant update to the language, and the first update to the language since ES5 was standardized in 2009. Implementation of these features in major JavaScript engines is underway now. Content is copied shamelessly from lukehoban/es6features ES6 includes the following new features: arrows classes enhanced object literals template strings destructuring default + rest + spread let + const iterators + for..of generators unicode modules module loaders map + set + weakmap + weakset proxies symbols subclassable built-ins promises math + number + string + array + object APIs binary and octal literals reflect api tail calls ECMAScript 6 Features Arrows Arrows are a function shorthand using the =&amp;gt; syntax. They are syntactically similar to the related feature in C#, Java 8 and CoffeeScript. They support both statement block bodies as well as expression bodies which return the value of the expression. Unlike functions, arrows share the same lexical this as their surrounding code. // Expression bodies var odds = evens.map(v =&amp;gt; v + 1); var nums = evens.map((v, i) =&amp;gt; v + i); var pairs = evens.map(v =&amp;gt; ({even: v, odd: v +...</description>
        <pubDate>Thu, 30 Jun 2016 01:19:48 +0530</pubDate>
        <link>https://lightrains.com/amp/blogs/es6/index.html</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/es6</guid>
        
        <category>ES6</category>
        
        <category>ECMAScript 2015</category>
        
        <category>Escamscript 6</category>
        
        <category>ES6 Tutorials</category>
        
        
      </item>
    
      <item>
        <title>Evolving the Identity</title>
        <description>Big news! Today, after five years, we’re releasing an updated brand identity, which includes a new logo, colors, and font. You’ll see the new look anywhere we’re out in public, like our website, Facebook, and Twitter; very soon you’ll see it in all of our products, as well.

We started by distilling the essence of our brand down to its colors on a clean white background—and built it back up.

Our design goal was to better match how we look to our values and the users we serve. A small team inside the company worked to find something that appeared crisp, approachable, smart, friendly, and connected.

Though it was time for change,
We’re still the same team: focused on Consulting &amp;amp; Development on Blockchain, Drupal and ES6.

As we begin this new chapter in Vision’s history, we are appreciative of each one of our customers, who collaborate with us daily to create next generation technology. We look forward to continued partnership and great things to come.

Sincerely,

Nikhil Mohan
COO
</description>
        <pubDate>Thu, 23 Jun 2016 01:19:48 +0530</pubDate>
        <link>https://lightrains.com/amp/blogs/new-brand-identity-lightrains-tech/index.html</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/new-brand-identity-lightrains-tech</guid>
        
        <category>Brand</category>
        
        <category>Typography</category>
        
        
      </item>
    
      <item>
        <title>What is a DAO aka Decentralized Autonomous Organization</title>
        <description>A Decentralized autonomous organizations (“DAO”) is a new type of organization, best comparable to a digital company, but without an attached legal entity. Made from irrefutable computer code, it is operated entirely by its community Essentially, it’s a non-human specific entity, who’s sole duty is to abide by a specific programmatic set of rules; or by the rules granted to it by decentralized consensus (majority decides what to do in a distributed manner). So far, all contracts we listed were owned and executed by other accounts probably held by humans. But there is no discrimination against robots or humans in the Ethereum ecosystem and contracts can create arbitrary actions like any other account would. Contracts can own tokens, participate in crowdsales, and even be voting members of other contracts. “On the Blockchain, no one knows you’re a fridge” - Richard Brown What is a DAO token A DAO leverages smart contracts on the Ethereum blockchain so that anyone, anywhere in the world can be empowered to participate. In exchange for their early help, participants receive DAO tokens which hold many benefits. Owning DAO tokens functions in a similar way to having shareholder rights in an actual company. By owning DAO...</description>
        <pubDate>Thu, 23 Jun 2016 01:19:48 +0530</pubDate>
        <link>https://lightrains.com/amp/blogs/what-is-dao-decentralized-autonomous-organization/index.html</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/what-is-dao-decentralized-autonomous-organization</guid>
        
        <category>DAO</category>
        
        <category>The DAO</category>
        
        
      </item>
    
      <item>
        <title>Compile and Deploy Solidity Contract</title>
        <description>Contracts live on the blockchain in an Ethereum-specific binary format (Ethereum Virtual Machine (=EVM) bytecode). This tutorial explains how to deploy the byte code to Ethereum Blockchain For the frontier release, geth supports solidity compilation through system call to solc, the command line solidity compiler by Christian R. and Lefteris K. Step 1. Install Solidity Compiler Solc Easy way Its very easy to install solc using npm the package manager for NodeJS the command is npm install solc Easier way Browser-Solidity If you just want to try Solidity for small contracts, you can try browser-solidity which does not need any installation. If you want to use it without connection to the Internet, you can also just save the page locally or clone http://github.com/chriseth/browser-solidity. Building from Source Assuming you are using Ubuntu 14.04 sudo apt-add-repository ppa:george-edison55/cmake-3.x sudo apt-get -y update sudo apt-get -y install language-pack-en-base sudo dpkg-reconfigure locales sudo apt-get -y install software-properties-common sudo add-apt-repository -y ppa:ethereum/ethereum sudo add-apt-repository -y ppa:ethereum/ethereum-dev sudo apt-get -y update sudo apt-get -y upgrade And pull the solidity source code git clone --recursive https://github.com/ethereum/webthree-umbrella.git cd webthree-umbrella ./webthree-helpers/scripts/ethupdate.sh --no-push --simple-pull --project solidity # update Solidity repo ./webthree-helpers/scripts/ethbuild.sh --no-git --project solidity --all --cores 4 -DEVMJIT=0 Step 2. Verify...</description>
        <pubDate>Fri, 17 Jun 2016 11:19:48 +0530</pubDate>
        <link>https://lightrains.com/amp/blogs/compile-deploy-solidity-contract-ethereum-console-geth-part-1/index.html</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/compile-deploy-solidity-contract-ethereum-console-geth-part-1</guid>
        
        <category>Blockchain</category>
        
        <category>Smart Contract</category>
        
        
      </item>
    
      <item>
        <title>How to setup a local test Ethereum Blockchain</title>
        <description>Setting up a private chain is useful for testing purposes or simply for playing around with, I couldn’t find a good tutorial on it so I thought I would write my own. In this tutorial we are working on Ubuntu 14.04 LTS and Go Implementation of Ethereum go-ethereum or simply geth Prerequisites geth ubuntu 14.04 The Fist Block - Genesis Block The Genesis block is the start block of the Blockchain - the first block, block 0, the only block that does not point to a predecessor block. It’s the entry point into the Blockchain database. The Genesis data defines initial parameters of the database and defines a cryptographically valid entry block. You might think thats a flaw in the system being able to decide the starting conditions of the chain, but the consensus algorithm will ensure that no other node will agree with your version of the blockchain unless they have the same genesis block (and some other crucial parameters, discussed later). How to Create Genesis Block Great, so how do we make one of these genesis blocks? Well its fairly simple the following JSON is all you really need: { &quot;nonce&quot;: &quot;0x0000000000000042&quot;, &quot;mixhash&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;, &quot;difficulty&quot;: &quot;0x4000&quot;, &quot;alloc&quot;: {},...</description>
        <pubDate>Mon, 13 Jun 2016 11:19:48 +0530</pubDate>
        <link>https://lightrains.com/amp/blogs/setup-local-ethereum-blockchain-private-testnet/index.html</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/setup-local-ethereum-blockchain-private-testnet</guid>
        
        <category>Private Blockchain</category>
        
        <category>Blockchain</category>
        
        <category>Ethereum</category>
        
        <category>Testnet</category>
        
        
      </item>
    
      <item>
        <title>What is Ethereum</title>
        <description>Ethereum is a public blockchain-based distributed computing platform, featuring smart contract functionality. It provides a decentralized virtual machine, the Ethereum Virtual Machine (EVM), that can execute peer-to-peer contracts using a cryptocurrency called ether.


  Applications build with Ethereum do not cover all use cases of course, but have specific properties that make them unique:
  Ethereum applications always execute the code they say they will - there is no ‘security through obscurity’. I don’t need to ‘trust’ anything or anyone, because I can check the app code myself.
  Ethereum applications are always available, and are guaranteed to be available in the future. There is no downtime.
Ethereum applications are resistant to many attacks including denial of service (DDoS), which are rendered moot.


Important links

  ethereum.org
  wiki



</description>
        <pubDate>Mon, 13 Jun 2016 11:19:48 +0530</pubDate>
        <link>https://lightrains.com/amp/blogs/what-is-ethereum/index.html</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/what-is-ethereum</guid>
        
        <category>Ethereum</category>
        
        <category>Cryptocurrency</category>
        
        
      </item>
    
      <item>
        <title>What is Bitcoin the currency</title>
        <description>Bitcoin is a form of digital currency, created and held electronically. No one controls it. Bitcoins aren’t printed, like dollars or euros – they’re produced by people, and increasingly businesses, running computers all around the world, using software that solves mathematical problems. What makes it different from normal currencies? Bitcoin can be used to buy things electronically. In that sense, it’s like conventional dollars, euros, or yen, which are also traded digitally. However, bitcoin’s most important characteristic, and the thing that makes it different to conventional money, is that it is decentralized. No single institution controls the bitcoin network. This puts some people at ease, because it means that a large bank can’t control their money. Who created it? A software developer called Satoshi Nakamoto proposed bitcoin, which was an electronic payment system based on mathematical proof. The idea was to produce a currency independent of any central authority, transferable electronically, more or less instantly, with very low transaction fees. Why Bitcoins? Bitcoins can be used to buy merchandise anonymously. In addition, international payments are easy and cheap because bitcoins are not tied to any country or subject to regulation. Small businesses may like them because there are no credit...</description>
        <pubDate>Mon, 13 Jun 2016 11:19:48 +0530</pubDate>
        <link>https://lightrains.com/amp/blogs/what-is-bitcoin-currency/index.html</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/what-is-bitcoin-currency</guid>
        
        <category>Bitcoin</category>
        
        <category>Principles</category>
        
        <category>Cryptocurrency</category>
        
        
      </item>
    
      <item>
        <title>Cryptocurrency 101 - Part 2/3 - Why use cryptocurrencies instead of cash?</title>
        <description>This is probably the most common question asked.
First, we need to take a look at the evolution of trade:


  Initially, trade was done through a barter system. You have an asset I want, I have an asset you want, let’s trade. Here, a apple farmer can trade his apples to a sheep herder for wool.
  Here, we run into a problem. What if you don’t have something I want? Metals, particularly gold and silver, were often used as a mechanism for trade.
  With the rise of kingdoms and nations, many wanted to show their reign and would melt metals and recast them to showcase an emblem with their nation.
  Eventually, nations realized that metals weren’t efficient, and paper money was created.
  With the rise of the internet, we now have online banking, where currency is just digital figures.


This is a simple look, but it’s obvious that cryptocurrencies are the next evolution of trade.


  Like most features in evolution, the unregulated — capitalistic supply/demand — aspect is based off the Great Recession of 2007.




Sources


  http://bitcoin.stackexchange.com/q/182/30316
  https://medium.com/@sebfung/cryptocurrencies-101-c1c0a5a3cc2

</description>
        <pubDate>Tue, 12 Jan 2016 00:00:00 +0530</pubDate>
        <link>https://lightrains.com/amp/blogs/cryptocurrency-101-why-use-cryptocurrencies-instead-cash/index.html</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/cryptocurrency-101-why-use-cryptocurrencies-instead-cash</guid>
        
        <category>Cryptocurrency</category>
        
        <category>Handbook</category>
        
        
      </item>
    
      <item>
        <title>Cryptocurrency 101 - Part 1/3 - The Basics</title>
        <description>What is a Cryptocurrency? A cryptocurrency is essentially an alternative virtual currency that can be used to buy and sell goods and services in the same way as a traditional “fiat” currency. Transactions are made via a secure encrypted channel to transfer money between virtual “wallets”, without needing to go through a traditional bank or credit card provider. Cryptocurrencies make it easier to transfer funds between two parties in transactions; these transfers are facilitated through the use of public and private keys for security purposes. These fund transfers are done with minimal processing fees, enabling users to avoid the steep fees charged by most banks and financial institutions for wire transfers. How it works Cryptocurrencies are a bit different to traditional currencies. They offer a “decentralized” medium of exchange, which means that they derive their value from their community of users, unlike traditional currencies that are controlled by central banks and government regulation. This means that the value can fluctuate a lot more like a stock or commodity, dependent on the amount of supply and demand for that currency. What gives them their value? They have value because they are scarce, fungible (one Bitcoin is as good as another), easily...</description>
        <pubDate>Fri, 08 Jan 2016 00:00:00 +0530</pubDate>
        <link>https://lightrains.com/amp/blogs/cryptocurrency-101/index.html</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/cryptocurrency-101</guid>
        
        <category>Cryptocurrency</category>
        
        <category>Handbook</category>
        
        
      </item>
    
      <item>
        <title>PSC HUB is now available as Telegram Bot</title>
        <description>Now Telegram Messenger Users can Get PSC HUB - Kerala PSC Questions as a Telegram Bot, Through this users can


  Get Random Questions in a Chat
  Realtime Questions
  Your Statistics
  Instant Support


How I get this Inside Telegram Messenger


  Open Telegram Messenger
  Search for “pschub”
  You will see “PSC HUB Bot”
  Just start the bot and enjoy.
  Or Simply Click HERE


What is a Bot
Bots are simply Telegram accounts operated by software – not people – and they’ll often have AI features. They can do anything – teach, play, search, broadcast, remind, connect, integrate with other services, or even pass commands to the Internet of Things.
</description>
        <pubDate>Sun, 17 May 2015 11:19:48 +0530</pubDate>
        <link>https://lightrains.com/amp/blogs/psc-hub-kerala-psc-questions-available-telegram-bot/index.html</link>
        <guid isPermaLink="true">https://lightrains.com/blogs/psc-hub-kerala-psc-questions-available-telegram-bot</guid>
        
        <category>Products</category>
        
        <category>Telegram</category>
        
        
      </item>
    
  </channel>
</rss>
